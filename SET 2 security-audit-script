#!/bin/bash

# Security Audit and Server Hardening Script

# Define colors for output
GREEN="\033[32m"
RED="\033[31m"
NC="\033[0m" # No Color

# Function to check if the script is run as root
check_root() {
  if [ "$EUID" -ne 0 ]; then 
    echo -e "${RED}Please run as root${NC}"
    exit
  fi
}

# Function to audit users and groups
audit_users_and_groups() {
  echo -e "${GREEN}Auditing Users and Groups...${NC}"
  echo "List of users:"
  cut -d: -f1 /etc/passwd
  echo "List of groups:"
  cut -d: -f1 /etc/group
  echo "Users with UID 0 (root privileges):"
  awk -F: '($3 == 0) {print $1}' /etc/passwd
}

# Function to audit file and directory permissions
audit_permissions() {
  echo -e "${GREEN}Auditing File and Directory Permissions...${NC}"
  echo "World-writable files and directories:"
  find / -xdev -type d \( -perm -0002 -a ! -perm -1000 \) -print
  find / -xdev -type f \( -perm -0002 \) -print
  echo "Files with SUID/SGID bits set:"
  find / -xdev -type f \( -perm -4000 -o -perm -2000 \) -print
}

# Function to audit running services
audit_services() {
  echo -e "${GREEN}Auditing Running Services...${NC}"
  echo "Running services:"
  systemctl list-units --type=service --state=running
  echo "Checking for unauthorized services (customize this list)..."
  for service in sshd httpd crond; do
    if systemctl is-active --quiet $service; then
      echo "$service is running"
    else
      echo "$service is not running"
    fi
  done
}

# Function to audit firewall and network security
audit_firewall_and_network() {
  echo -e "${GREEN}Auditing Firewall and Network Security...${NC}"
  echo "Firewall status (iptables):"
  iptables -L -n -v
  echo "Open ports and their associated services:"
  netstat -tuln
}

# Function to check IP and network configurations
check_ip_and_network() {
  echo -e "${GREEN}Checking IP and Network Configurations...${NC}"
  ip addr show
  echo -e "\nPublic IP address (if any):"
  curl -s http://checkip.amazonaws.com || echo "Unable to fetch public IP"
}

# Function to check for security updates and patching
check_security_updates() {
  echo -e "${GREEN}Checking for Security Updates...${NC}"
  yum check-update
  echo -e "\nListing security updates:"
  yum updateinfo list security all
}

# Function to monitor logs
monitor_logs() {
  echo -e "${GREEN}Monitoring Logs for Suspicious Activity...${NC}"
  grep "sshd" /var/log/secure | tail -n 10
}

# Function to harden server
harden_server() {
  echo -e "${GREEN}Applying Server Hardening Measures...${NC}"
  # SSH configuration hardening
  echo "Disabling root login via SSH and forcing key-based authentication..."
  sed -i 's/^PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config
  sed -i 's/^PasswordAuthentication.*/PasswordAuthentication no/' /etc/ssh/sshd_config
  systemctl restart sshd

  # Disable IPv6
  echo "Disabling IPv6..."
  sysctl -w net.ipv6.conf.all.disable_ipv6=1
  sysctl -w net.ipv6.conf.default.disable_ipv6=1
  
  # Secure the bootloader
  echo "Securing the GRUB bootloader..."
  echo "Set a password using the grub-mkpasswd-pbkdf2 command"
  echo "Update /etc/grub.d/40_custom and run update-grub"

  # Configure the firewall using iptables
  echo "Configuring the firewall with iptables..."
  iptables -P INPUT DROP
  iptables -P FORWARD DROP
  iptables -P OUTPUT ACCEPT
  iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
  iptables -A INPUT -p tcp --dport 22 -j ACCEPT
  iptables -A INPUT -i lo -j ACCEPT
  service iptables save
}

# Function for custom security checks
custom_security_checks() {
  echo -e "${GREEN}Running Custom Security Checks...${NC}"
  
  # Check password policies
  echo -e "\nPassword policies (min/max days, warn age):"
  grep -E '^PASS_MAX_DAYS|^PASS_MIN_DAYS|^PASS_WARN_AGE' /etc/login.defs
  
  # Check permissions on sensitive files
  echo -e "\nChecking permissions on sensitive files:"
  stat /etc/passwd /etc/shadow
  
  # Check for any empty passwords
  echo -e "\nChecking for users with empty passwords:"
  awk -F: '($2 == "") {print $1}' /etc/shadow
}

# Function for generating report
generate_report() {
  echo -e "${GREEN}Generating Security Audit Report...${NC}"
  echo "Summary of the security audit has been saved to /var/log/security_audit_report"
  # Save to a report file
  {
    echo "Security Audit Report - $(date)"
    audit_users_and_groups
    audit_permissions
    audit_services
    audit_firewall_and_network
    check_ip_and_network
    check_security_updates
    custom_security_checks
  } > /var/log/security_audit_report
}

# Main function
main() {
  check_root
  audit_users_and_groups
  audit_permissions
  audit_services
  audit_firewall_and_network
  check_ip_and_network
  check_security_updates
  monitor_logs
  harden_server
  custom_security_checks
  generate_report
}

# Run the main function
main
